//! Provides quantities representing numbers combined with the SI prefix and unit system.




//=============================================================================
// Crates


use std::fmt;




//=============================================================================
// Traits


/// Providing conversion into LaTeX code.
///
/// This Trait is only available, if the **`tex`** feature has been enabled.
pub trait Latex {
	/// Converts the entity into a LaTeX-string.
	fn to_latex( &self, options: &Options ) -> String;
}




//=============================================================================
// Structs


/// Representing options to LaTeX commands generated by `to_latex`.
#[derive( PartialEq, Default, Debug )]
pub struct Options {
	pub drop_zero_decimal: Option<bool>,
	pub minimum_decimal_digits: Option<u8>,
}

impl Options {
	// Create a new `Options` without an option active. Is identical to `none()`.
	pub fn new() -> Options {
		Options::default()
	}

	// Create a new `Options` without an option active.
	pub fn none() -> Options {
		Options::default()
	}

	// Provide the builder to help the user discover it.
	pub fn builder() -> OptionsBuilder {
		OptionsBuilder::default()
	}
}

impl fmt::Display for Options {
	fn fmt( &self, f: &mut fmt::Formatter ) -> fmt::Result {
		match self.drop_zero_decimal {
			Some( x ) if x => write!( f, "[drop-zero-decimal]" ),
			_ => write!( f, "" ),
		}
	}
}




#[derive( PartialEq, Default )]
pub struct OptionsBuilder {
	drop_zero_decimal: bool,
	minimum_decimal_digits: Option<u8>,
}

impl OptionsBuilder {
	pub fn new() -> OptionsBuilder {
		// Set the minimally required fields.
		OptionsBuilder::default()
	}

	pub fn drop_zero_decimal( mut self, sw: bool ) -> OptionsBuilder {
		self.drop_zero_decimal = sw;
		self
	}

	pub fn minimum_decimal_digits( mut self, digits: Option<u8> ) -> OptionsBuilder {
		self.minimum_decimal_digits = digits;
		self
	}

	pub fn build( self ) -> Options {
		Options {
			drop_zero_decimal: if self.drop_zero_decimal { Some( self.drop_zero_decimal ) } else { None },
			minimum_decimal_digits: self.minimum_decimal_digits,
		}
	}
}




//=============================================================================
// Testing


#[cfg( test )]
mod tests {
	use super::*;

	#[test]
	fn builder_test() {
		let opts = Options {
			drop_zero_decimal: Some( true ),
			..Default::default()
		};
		let opts_from_builder: Options = OptionsBuilder::new().drop_zero_decimal( true ).build();
		assert_eq!( opts, opts_from_builder );
	}

	#[test]
	fn options_to_string() {
		assert_eq!( Options::default().to_string(), "".to_string() );
		assert_eq!(
			Options::builder()
				.drop_zero_decimal( true )
				.build()
				.to_string(),
			"[drop-zero-decimal]".to_string()
		);
	}
}
